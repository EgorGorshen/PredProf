from src.data_converter import Track, convert_data
from src.file_work import read_data, write_data
from src.utils import (
    START_DATE,
    count_artist_tracks,
    found_track_by_name,
    slavic_lang,
    insertion_sort,
)

DATA_PATH = "data/songs.csv"


def get_data(file_path: str) -> list[Track]:  # INFO: works
    data = read_data(file_path)
    data = list(filter(lambda x: x.release_date > START_DATE, data))
    data = insertion_sort(data)
    return data


def ex1_program():  # INFO: works
    """Перва программа
    Дата обращения: 12.05.23

    К нам обратилась компания, которая хочет получить все песни по
    дате выхода не позже 01.01.2002. Пока мы не доделали
    весь функционал нашей БД - найдите необходимые песни
    и предоставьте их в виде отчета в формате:
    “<Название песни> - <артист> - <кол-во прослушиваний>”.

    В процессе поиска вы увидели, что не у всех песен есть
     кол-во прослушиваний(те равное нулю), а так сдавать отчет нельзя,
      поэтому перед тем как отдать отчет предоставленный
      выше измените данные в таблице songs.csv
      (https://drive.google.com/file/d/1RFUsY4sX86ikdavcDTj00XdPchEAMzYG/view?usp=drive_link)
      исходя из правила. Кол-во прослушиваний рассчитывается по формуле:
    Измененные данные запишите в таблицу songs_new.csv

    В задаче запрещено использование сторонних библиотек(Pandas и др)
    """
    data = get_data(DATA_PATH)
    data = convert_data(data)
    write_data(
        "songs_new.csv", data, fieldnames=["track_name", "artist_name", "streams"]
    )


def ex2_program():
    """Вторая программа
    Чтобы в дальнейшем нам было удобнее работать
     с данными из нашей таблицы(songs.csv) отсортируйте
     их по столбцу дата в порядке возрастания с помощью
      быстрой сортировки (в задаче нельзя использовать
      встроенные функции сортировок!). Из полученных данных
      выведите топ-5 самых ранних песен. Формат каждой строки:
      “<№> <Название песни>, <Артист>, <дата выхода>”,
      где № - место в рейтинге.

    :return:
    """

    full_data = read_data(DATA_PATH)
    insertion_sort(full_data)
    write_data("songs_dump.csv", full_data)


def ex3_program():
    """Третья программа

    Пришло время сделать наработку для интерфейса, который
    будет взаимодействовать с базой данных. Для этого
    Вам необходимо написать консольную программу, которая
    будет запрашивать у пользователей имя артиста, а на
    выход будет выдавать его одну любую песню, если ничего
    не найдено будет выводить:
     “К сожалению, ничего не удалось найти”.
     Программа должна всегда запрашивать имя.
      Прекратить свою работу она сможет только после ввода “0”.

    Поиск необходимо осуществить с помощью алгоритма с асимптотической сложностью O(n).

    Формат ответа на запрос пользователя: “У <артист> найдена песня: <название песни>”

    Поиск необходимо осуществлять в файле songs.csv

    Не забудьте сделать комментарии к коду согласно стандартам
     документирования кода выбранного языка.
     После выполнения необходимо сделать локальные
     и удаленные изменения Вашего репозитори

    :return:
    """
    data = read_data(DATA_PATH)
    name = input()
    while name != "0":
        track = found_track_by_name(name, data)
        if track is not None:
            print(f"У {track.artist_name} найдена песня: {name}")
        name = input()


def ex4_program():
    """4 программа
    Компания хочет провести статистику каких исполнителей
    в базе данных больше - зарубежных или отечественных.
    Для того чтобы решить это задание, создайте два списка
    - один должен содержать имена исполнителей на русском
    языке (russian_artists), второй - на остальных (foreign_artists).
     Имена исполнителей относятся к исполнителям на русском языке в случае,
      если в названии исполнителя есть хотя бы одна русская буква.
       Выведите информацию о количестве элементов в каждом
       из созданных списков в следующем формате:

    Количество российских исполнителей: {длина списка russian_artists}
    (https://drive.google.com/file/d/1wK_FbEUID_5Y_tHWNveiqhc7butER22Z/view?usp=drive_link)

    Количество иностранных исполнителей: {длина списка foreign_artists}
    (https://drive.google.com/file/d/12p4X5JYqaA5rloR4u9mXP0Hl6_CyNAJD/view?usp=drive_link)

    Обратите внимание, что каждый из исполнителей должен встречаться
     в списке только ОДИН раз.

    Запишите содержимое списков в файлы russian_artists.txt и
     foreign_artists.txt соответственно.

    Не забудьте сделать комментарии к коду согласно стандартам
    документирования кода выбранного языка. После выполнения
    необходимо сделать локальные и удаленные изменения Вашего репозитория


    :return:
    """
    data = read_data(DATA_PATH)
    data = {track.artist_name for track in data}
    ru_artists = list(filter(slavic_lang, data))
    print(f"Количество российских исполнителей: {len(ru_artists)}")
    print(f"Количество иностранных исполнителей: {len(data) - len(ru_artists)}")


def ex5_program():
    """5 program
    Компании нужно понять, какой исполнитель в
    базе данных является наиболее популярным.
     Для решения этой задачи реализуйте хэш-таблицу,
      в которой ключом будет являться имя исполнителя,
      а значением количество его песен в базе данных.
      В случае, если один и тот же трек исполняется несколькими артистами,
       необходимо посчитать этот трек для того артиста, который указан первым.
       Выведите первые 10 артистов из полученной таблицы в формате

    <Название исполнителя> выпустил <количество песен> песен.

    Не забудьте сделать комментарии к
    коду согласно стандартам документирования кода выбранного языка.
    После выполнения необходимо сделать локальные
     и удаленные изменения Вашего репозитория
    :return:
    """
    data = read_data(DATA_PATH)
    artist_count = count_artist_tracks(data)
    best = sorted(artist_count.items(), key=lambda x: x[1], reverse=True)[:10]
    for art in best:
        print(f"{art[0]} выпустил {art[1]} песен.")


def main():
    ex1_program()


if __name__ == "__main__":
    main()
